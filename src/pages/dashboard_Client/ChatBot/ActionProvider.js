class ActionProvider {
    constructor(createChatBotMessage, setStateFunc, createClientMessage) {
      this.createChatBotMessage = createChatBotMessage;
      this.setState = setStateFunc;
      this.createClientMessage = createClientMessage;
    }


    presentation=()=>{

     
        const message = this.createChatBotMessage(`une portail web qui va assurer une communication instantanÃ©e entre le client et lâ€™imprimeur sur les dÃ©tails de la commande ou on va assurer lâ€™intervention du client pour avoir un produit convenable a ses besoins, cette communication va Ãªtre assurÃ© par lâ€™intermÃ©diaire dâ€™un administrateur de vente. ðŸ˜ŠðŸ˜Š .`
        )
        const message2 = this.createChatBotMessage(`Notre  web  composÃ© de trois partie (Admin de vente, Imprimeur, Client) ðŸ˜ŠðŸ˜Š .`
        )
        this.addMessageToState(message2);
        this.addMessageToState(message);
    };
 
    demande=()=>{

     
        const message = this.createChatBotMessage(`votre demande a Ã©tÃ© envoyer au administrateur.       
         Votre demande est en cours d'exÃ©cution ðŸ˜ŠðŸ˜Š .`
        )
        this.addMessageToState(message);
    };

    Inscrir=()=>{
        const message = this.createChatBotMessage("msg inscription",{
            widget: "Inscrir",
        }
        )
        this.addMessageToState(message);
    };
    greet=()=>{
const message= this.createChatBotMessage("Hello friend .",{
    widget: "Options",
})
this.addMessageToState(message);
    };
   
    
    addMessageToState =(message) =>{
        this.setState((prevState) =>({
            ...prevState,
            messages:[...prevState.messages,message],
        }));
    
    };
  }
  
  export default ActionProvider;